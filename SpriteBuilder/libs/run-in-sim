#!/usr/bin/env ruby

device_name = ARGV[0]
bundle_id = ARGV[1]
app_path = ARGV[2]
creation_path = ARGV[3]
start_slide_index = ARGV[4]

def main(device_name, bundle_id, app_path, creation_path, start_slide_index)
    xcode_path = run("/usr/bin/xcode-select -p").chomp
    abort("Xcode not installed") if xcode_path.empty?
    sim_path = xcode_path + "/Applications/Simulator.app/"

    device_id = find_device(device_name)
    abort("Unable to find device") if !device_id || device_id.empty?
    puts "Found device: #{device_id}"

    run("xcrun simctl boot #{device_id}")
    run("open -a Simulator --args --CurrentDeviceUDID #{device_id}")

    run("xcrun simctl install #{device_id} '#{app_path}'")
    data_path = run("xcrun simctl get_app_container #{device_id} #{bundle_id} data").chomp
    creation_target_path = "'#{data_path}/my.creation'"
    run("rm #{creation_target_path}")
    run("ln -s '#{creation_path}' #{creation_target_path}")
    run("xcrun simctl launch #{device_id} #{bundle_id} -AppPath #{creation_target_path} -StartSlideIndex #{start_slide_index}")
end

def run(command)
    puts "Running: #{command}"
    `#{command}`
end

def find_device(name)
    devices_output = `xcrun simctl list devices`
    device_regex = /(#{Regexp.escape(name)}\s+\(([^()]+)\)\s+\((Shutdown|Booted)\)\s*\n)/i
    matches = devices_output.scan(device_regex)
    return nil if matches.empty?

    matches.each do |match|
        puts "Potential match: #{match[0]}"
    end
    matches.last[1]
end

if (!device_name || device_name.empty? || !bundle_id || bundle_id.empty? || !app_path || app_path.empty? || !creation_path || creation_path.empty?)
    abort("Missing arguments") 
end

main(device_name, bundle_id, app_path, creation_path, start_slide_index || 0)
