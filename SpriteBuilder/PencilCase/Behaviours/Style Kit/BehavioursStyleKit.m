//
//  BehavioursStyleKit.m
//  PencilCase
//
//  Created by Cody Rayment on 2014-12-03.
//  Copyright (c) 2014 Robots & Pencils. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "BehavioursStyleKit.h"


@implementation BehavioursStyleKit

#pragma mark Initialization

+ (void)initialize
{
}

+ (NSColor *)lightBlueColor {
    static NSColor *lightBlue;
    lightBlue = [NSColor colorWithRed:162 / 255.0 green:190 / 255.0 blue:222 / 255.0 alpha:1];
    return lightBlue;
}

+ (NSColor *)normalBlueColor {
    static NSColor *normalBlue;
    normalBlue = [NSColor colorWithCalibratedRed:74 / 255.0 green:144 / 255.0 blue:226 / 255.0 alpha:1];
    return normalBlue;
}

+ (NSColor *)darkBlueColor {
    static NSColor *darkBlue;
    darkBlue = [NSColor colorWithCalibratedRed:30 / 255.0 green:66 / 255.0 blue:109 / 255.0 alpha:1.0];
    return darkBlue;
}

+ (NSColor *)errorColor {
    static NSColor *errorColor;
    errorColor = [NSColor colorWithCalibratedRed:0.83 green:0.225 blue:0.225 alpha:1];
    return errorColor;
}

#pragma mark Drawing Methods

+ (void)drawThenWithFrame: (NSRect)frame sourceHighlightColor: (NSColor*)sourceHighlightColor topConnected: (BOOL)topConnected bottomConnected: (BOOL)bottomConnected isSelected: (BOOL)isSelected isNextThenSelected: (BOOL)isNextThenSelected isSourceHighlighted: (BOOL)isSourceHighlighted hideTopConnector: (BOOL)hideTopConnector hideBottomConnector: (BOOL)hideBottomConnector
{
    //// General Declarations
    CGContextRef context = NSGraphicsContext.currentContext.CGContext;

    //// Color Declarations
    NSColor* thenBG = [NSColor colorWithCalibratedRed: 0.96 green: 0.961 blue: 0.96 alpha: 1];
    NSColor* selected = [self normalBlueColor];
    NSColor* whenBG = [NSColor colorWithCalibratedRed: 0.779 green: 0.759 blue: 0.779 alpha: 1];
    NSColor* sourceHighlightBorder = [self normalBlueColor];

    //// Variable Declarations
    CGFloat bottomConnectorYOffset = bottomConnected ? -6 : 0;
    BOOL drawSelectedBottomLine = bottomConnected && isNextThenSelected;
    BOOL bottomConnectorSelected = isSelected || drawSelectedBottomLine;
    NSColor* thenBorderColor = isSourceHighlighted ? sourceHighlightBorder : (isSelected ? selected : whenBG);
    NSColor* thenBackgroundColor = isSourceHighlighted ? sourceHighlightColor : thenBG;
    BOOL showBottomConnector = !hideBottomConnector;


    //// Subframes
    NSRect frame2 = NSMakeRect(NSMinX(frame) + floor((NSWidth(frame) - 29) * 0.49704 + 0.5), NSMinY(frame), 29, 25);
    NSRect frame3 = NSMakeRect(NSMinX(frame) + floor((NSWidth(frame) - 29) * 0.49704 + 0.5), NSMinY(frame) + NSHeight(frame) - 19, 29, 20);


    //// Bezier 4 Drawing
    NSBezierPath* bezier4Path = NSBezierPath.bezierPath;
    [bezier4Path moveToPoint: NSMakePoint(NSMaxX(frame) - 1, NSMaxY(frame) - 15)];
    [bezier4Path lineToPoint: NSMakePoint(NSMaxX(frame) - 1, NSMinY(frame) + 26)];
    [bezier4Path curveToPoint: NSMakePoint(NSMaxX(frame) - 11, NSMinY(frame) + 16) controlPoint1: NSMakePoint(NSMaxX(frame) - 1, NSMinY(frame) + 20.48) controlPoint2: NSMakePoint(NSMaxX(frame) - 5.48, NSMinY(frame) + 16)];
    [bezier4Path lineToPoint: NSMakePoint(NSMinX(frame) + 34, NSMinY(frame) + 16)];
    [bezier4Path lineToPoint: NSMakePoint(NSMinX(frame) + 34, NSMinY(frame) + 20)];
    [bezier4Path curveToPoint: NSMakePoint(NSMinX(frame) + 30, NSMinY(frame) + 24) controlPoint1: NSMakePoint(NSMinX(frame) + 34, NSMinY(frame) + 22.21) controlPoint2: NSMakePoint(NSMinX(frame) + 32.21, NSMinY(frame) + 24)];
    [bezier4Path lineToPoint: NSMakePoint(NSMinX(frame) + 22, NSMinY(frame) + 24)];
    [bezier4Path curveToPoint: NSMakePoint(NSMinX(frame) + 18, NSMinY(frame) + 20) controlPoint1: NSMakePoint(NSMinX(frame) + 19.79, NSMinY(frame) + 24) controlPoint2: NSMakePoint(NSMinX(frame) + 18, NSMinY(frame) + 22.21)];
    [bezier4Path lineToPoint: NSMakePoint(NSMinX(frame) + 18, NSMinY(frame) + 16)];
    [bezier4Path lineToPoint: NSMakePoint(NSMinX(frame) + 11, NSMinY(frame) + 16)];
    [bezier4Path curveToPoint: NSMakePoint(NSMinX(frame) + 1, NSMinY(frame) + 26) controlPoint1: NSMakePoint(NSMinX(frame) + 5.48, NSMinY(frame) + 16) controlPoint2: NSMakePoint(NSMinX(frame) + 1, NSMinY(frame) + 20.48)];
    [bezier4Path lineToPoint: NSMakePoint(NSMinX(frame) + 1, NSMaxY(frame) - 15)];
    [bezier4Path curveToPoint: NSMakePoint(NSMinX(frame) + 11, NSMaxY(frame) - 5) controlPoint1: NSMakePoint(NSMinX(frame) + 1, NSMaxY(frame) - 9.48) controlPoint2: NSMakePoint(NSMinX(frame) + 5.48, NSMaxY(frame) - 5)];
    [bezier4Path lineToPoint: NSMakePoint(NSMinX(frame) + 18, NSMaxY(frame) - 5)];
    [bezier4Path lineToPoint: NSMakePoint(NSMinX(frame) + 18, NSMaxY(frame) - 9)];
    [bezier4Path curveToPoint: NSMakePoint(NSMinX(frame) + 22, NSMaxY(frame) - 13) controlPoint1: NSMakePoint(NSMinX(frame) + 18, NSMaxY(frame) - 11.21) controlPoint2: NSMakePoint(NSMinX(frame) + 19.79, NSMaxY(frame) - 13)];
    [bezier4Path lineToPoint: NSMakePoint(NSMinX(frame) + 30, NSMaxY(frame) - 13)];
    [bezier4Path curveToPoint: NSMakePoint(NSMinX(frame) + 34, NSMaxY(frame) - 9) controlPoint1: NSMakePoint(NSMinX(frame) + 32.21, NSMaxY(frame) - 13) controlPoint2: NSMakePoint(NSMinX(frame) + 34, NSMaxY(frame) - 11.21)];
    [bezier4Path lineToPoint: NSMakePoint(NSMinX(frame) + 34, NSMaxY(frame) - 5)];
    [bezier4Path lineToPoint: NSMakePoint(NSMinX(frame3) + 2.63, NSMaxY(frame3) - 6)];
    [bezier4Path curveToPoint: NSMakePoint(NSMinX(frame3) + 11.05, NSMaxY(frame3) - 14.39) controlPoint1: NSMakePoint(NSMinX(frame3) + 3.91, NSMaxY(frame3) - 9.98) controlPoint2: NSMakePoint(NSMinX(frame3) + 7.06, NSMaxY(frame3) - 13.12)];
    [bezier4Path curveToPoint: NSMakePoint(NSMinX(frame3) + 15, NSMaxY(frame3) - 15) controlPoint1: NSMakePoint(NSMinX(frame3) + 12.29, NSMaxY(frame3) - 14.79) controlPoint2: NSMakePoint(NSMinX(frame3) + 13.62, NSMaxY(frame3) - 15)];
    [bezier4Path curveToPoint: NSMakePoint(NSMinX(frame3) + 27.37, NSMaxY(frame3) - 6) controlPoint1: NSMakePoint(NSMinX(frame3) + 20.78, NSMaxY(frame3) - 15) controlPoint2: NSMakePoint(NSMinX(frame3) + 25.69, NSMaxY(frame3) - 11.22)];
    [bezier4Path lineToPoint: NSMakePoint(NSMaxX(frame) - 11, NSMaxY(frame) - 5)];
    [bezier4Path curveToPoint: NSMakePoint(NSMaxX(frame) - 1, NSMaxY(frame) - 15) controlPoint1: NSMakePoint(NSMaxX(frame) - 5.48, NSMaxY(frame) - 5) controlPoint2: NSMakePoint(NSMaxX(frame) - 1, NSMaxY(frame) - 9.48)];
    [bezier4Path closePath];
    [thenBackgroundColor setFill];
    [bezier4Path fill];
    [thenBorderColor setStroke];
    [bezier4Path setLineWidth: 2];
    [bezier4Path stroke];


    if (topConnected)
    {
        //// Bezier Drawing
        NSBezierPath* bezierPath = NSBezierPath.bezierPath;
        [bezierPath moveToPoint: NSMakePoint(NSMinX(frame) + 1, NSMaxY(frame) - 17)];
        [bezierPath lineToPoint: NSMakePoint(NSMinX(frame) + 1, NSMaxY(frame))];
        [bezierPath lineToPoint: NSMakePoint(NSMinX(frame) + 18, NSMaxY(frame))];
        [bezierPath lineToPoint: NSMakePoint(NSMinX(frame) + 18, NSMaxY(frame) - 4)];
        [bezierPath curveToPoint: NSMakePoint(NSMinX(frame) + 22, NSMaxY(frame) - 8) controlPoint1: NSMakePoint(NSMinX(frame) + 18, NSMaxY(frame) - 6.21) controlPoint2: NSMakePoint(NSMinX(frame) + 19.79, NSMaxY(frame) - 8)];
        [bezierPath lineToPoint: NSMakePoint(NSMinX(frame) + 30, NSMaxY(frame) - 8)];
        [bezierPath curveToPoint: NSMakePoint(NSMinX(frame) + 34, NSMaxY(frame) - 4) controlPoint1: NSMakePoint(NSMinX(frame) + 32.21, NSMaxY(frame) - 8) controlPoint2: NSMakePoint(NSMinX(frame) + 34, NSMaxY(frame) - 6.21)];
        [bezierPath lineToPoint: NSMakePoint(NSMinX(frame) + 34, NSMaxY(frame))];
        [bezierPath lineToPoint: NSMakePoint(NSMaxX(frame) - 1, NSMaxY(frame))];
        [bezierPath lineToPoint: NSMakePoint(NSMaxX(frame) - 1, NSMaxY(frame) - 0)];
        [bezierPath curveToPoint: NSMakePoint(NSMaxX(frame) - 1, NSMaxY(frame) - 17) controlPoint1: NSMakePoint(NSMaxX(frame) - 1, NSMaxY(frame)) controlPoint2: NSMakePoint(NSMaxX(frame) - 1, NSMaxY(frame) - 17)];
        [thenBackgroundColor setFill];
        [bezierPath fill];
        [thenBorderColor setStroke];
        [bezierPath setLineWidth: 2];
        [bezierPath stroke];
    }


    if (bottomConnected)
    {
        //// Bezier 3 Drawing
        NSBezierPath* bezier3Path = NSBezierPath.bezierPath;
        [bezier3Path moveToPoint: NSMakePoint(NSMaxX(frame) - 1, NSMinY(frame) + 29)];
        [bezier3Path lineToPoint: NSMakePoint(NSMaxX(frame) - 1, NSMinY(frame) + 29)];
        [bezier3Path curveToPoint: NSMakePoint(NSMaxX(frame) - 1, NSMinY(frame) + 12) controlPoint1: NSMakePoint(NSMaxX(frame) - 1, NSMinY(frame) + 29) controlPoint2: NSMakePoint(NSMaxX(frame) - 1, NSMinY(frame) + 12)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(frame) + 34, NSMinY(frame) + 12)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(frame) + 34, NSMinY(frame) + 16)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(frame) + 30, NSMinY(frame) + 20) controlPoint1: NSMakePoint(NSMinX(frame) + 34, NSMinY(frame) + 18.21) controlPoint2: NSMakePoint(NSMinX(frame) + 32.21, NSMinY(frame) + 20)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(frame) + 22, NSMinY(frame) + 20)];
        [bezier3Path curveToPoint: NSMakePoint(NSMinX(frame) + 18, NSMinY(frame) + 16) controlPoint1: NSMakePoint(NSMinX(frame) + 19.79, NSMinY(frame) + 20) controlPoint2: NSMakePoint(NSMinX(frame) + 18, NSMinY(frame) + 18.21)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(frame) + 18, NSMinY(frame) + 12)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(frame) + 1, NSMinY(frame) + 12)];
        [bezier3Path lineToPoint: NSMakePoint(NSMinX(frame) + 1, NSMinY(frame) + 29)];
        [thenBackgroundColor setFill];
        [bezier3Path fill];
        [thenBorderColor setStroke];
        [bezier3Path setLineWidth: 2];
        [bezier3Path stroke];
    }


    if (drawSelectedBottomLine)
    {
        //// Bezier 2 Drawing
        NSBezierPath* bezier2Path = NSBezierPath.bezierPath;
        [bezier2Path moveToPoint: NSMakePoint(NSMaxX(frame), NSMinY(frame) + 12)];
        [bezier2Path lineToPoint: NSMakePoint(NSMinX(frame) + 33, NSMinY(frame) + 12)];
        [bezier2Path moveToPoint: NSMakePoint(NSMinX(frame) + 19, NSMinY(frame) + 12)];
        [bezier2Path lineToPoint: NSMakePoint(NSMinX(frame), NSMinY(frame) + 12)];
        [selected setStroke];
        [bezier2Path setLineWidth: 2];
        [bezier2Path stroke];
    }


    if (showBottomConnector)
    {
        //// Symbol Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, NSMinX(frame2) + 0.13793 * NSWidth(frame2), NSMinY(frame2) + 6);

        NSRect symbolRect = NSMakeRect(0, bottomConnectorYOffset, 22, 15);
        [NSGraphicsContext saveGraphicsState];
        NSRectClip(symbolRect);
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

        [BehavioursStyleKit drawConnectorWithSourceHighlightColor: sourceHighlightColor bottomConnected: bottomConnected isSelected: bottomConnectorSelected isSourceHighlighted: isSourceHighlighted];
        [NSGraphicsContext restoreGraphicsState];

        [NSGraphicsContext restoreGraphicsState];
    }


    if (hideTopConnector)
    {
        //// Rectangle Drawing
        NSBezierPath* rectanglePath = NSBezierPath.bezierPath;
        [rectanglePath moveToPoint: NSMakePoint(NSMinX(frame3) + 29, NSMaxY(frame3) - 6)];
        [rectanglePath lineToPoint: NSMakePoint(NSMinX(frame3), NSMaxY(frame3) - 6)];
        [thenBG setFill];
        [rectanglePath fill];
        [thenBorderColor setStroke];
        [rectanglePath setLineWidth: 2];
        [rectanglePath stroke];


        //// Rectangle 2 Drawing
        NSBezierPath* rectangle2Path = [NSBezierPath bezierPathWithRect: NSMakeRect(NSMinX(frame3), NSMinY(frame3) + NSHeight(frame3) - 19, 29, 12)];
        [thenBackgroundColor setFill];
        [rectangle2Path fill];
    }
}

+ (void)drawConnectorWithSourceHighlightColor: (NSColor*)sourceHighlightColor bottomConnected: (BOOL)bottomConnected isSelected: (BOOL)isSelected isSourceHighlighted: (BOOL)isSourceHighlighted
{
    //// Color Declarations
    NSColor* thenBG = [NSColor colorWithCalibratedRed: 0.96 green: 0.961 blue: 0.96 alpha: 1];
    NSColor* thenBorder = [NSColor colorWithCalibratedRed: 0.732 green: 0.718 blue: 0.733 alpha: 1];
    NSColor* selected = [NSColor colorWithCalibratedRed: 0.22 green: 0.471 blue: 0.871 alpha: 1];
    NSColor* thenContainer = [NSColor colorWithCalibratedRed: 1 green: 1 blue: 1 alpha: 1];
    NSColor* whenBG = [NSColor colorWithCalibratedRed: 0.779 green: 0.759 blue: 0.779 alpha: 1];
    NSColor* sourceHighlightBorder = [NSColor colorWithCalibratedRed: 0.16 green: 0.529 blue: 0.992 alpha: 1];

    //// Variable Declarations
    NSColor* connectorFillColor = bottomConnected ? selected : thenContainer;
    NSColor* thenBorderColor = isSourceHighlighted ? sourceHighlightBorder : (isSelected ? selected : whenBG);
    NSColor* thenBackgroundColor = isSourceHighlighted ? sourceHighlightColor : thenBG;

    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRect: NSMakeRect(2, 11, 18, 4)];
    [thenBackgroundColor setFill];
    [rectanglePath fill];


    //// Oval 2 Drawing
    NSBezierPath* oval2Path = NSBezierPath.bezierPath;
    [oval2Path moveToPoint: NSMakePoint(1, 11)];
    [oval2Path curveToPoint: NSMakePoint(11, 1) controlPoint1: NSMakePoint(1, 5.48) controlPoint2: NSMakePoint(5.48, 1)];
    [oval2Path curveToPoint: NSMakePoint(21, 11) controlPoint1: NSMakePoint(16.52, 1) controlPoint2: NSMakePoint(21, 5.48)];
    [thenBackgroundColor setFill];
    [oval2Path fill];
    [thenBorderColor setStroke];
    [oval2Path setLineWidth: 2];
    [oval2Path stroke];


    //// Oval 3 Drawing
    NSBezierPath* oval3Path = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(7, 6, 8, 8)];
    [connectorFillColor setFill];
    [oval3Path fill];
    [thenBorder setStroke];
    [oval3Path setLineWidth: 1];
    [oval3Path stroke];
}

+ (void)drawAddThenWithFrame: (NSRect)frame
{
    //// Color Declarations
    NSColor* thenBorder = [NSColor colorWithCalibratedRed: 0.732 green: 0.718 blue: 0.733 alpha: 1];

    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRect: NSMakeRect(NSMinX(frame) + floor(NSWidth(frame) * 0.41667 + 0.5), NSMinY(frame) + floor(NSHeight(frame) * 0.00000 + 0.5), floor(NSWidth(frame) * 0.58333 + 0.5) - floor(NSWidth(frame) * 0.41667 + 0.5), floor(NSHeight(frame) * 1.00000 + 0.5) - floor(NSHeight(frame) * 0.00000 + 0.5))];
    [thenBorder setFill];
    [rectanglePath fill];


    //// Rectangle 2 Drawing
    NSBezierPath* rectangle2Path = [NSBezierPath bezierPathWithRect: NSMakeRect(NSMinX(frame) + floor(NSWidth(frame) * 0.00000 + 0.5), NSMinY(frame) + floor(NSHeight(frame) * 0.41667 + 0.5), floor(NSWidth(frame) * 1.00000 + 0.5) - floor(NSWidth(frame) * 0.00000 + 0.5), floor(NSHeight(frame) * 0.58333 + 0.5) - floor(NSHeight(frame) * 0.41667 + 0.5))];
    [thenBorder setFill];
    [rectangle2Path fill];
}

+ (void)drawTokenBackgroundWithFrame: (NSRect)frame sourceHighlight: (BOOL)sourceHighlight rightConnected: (BOOL)rightConnected leftConnected: (BOOL)leftConnected insertNewMode: (BOOL)insertNewMode invalidToken: (BOOL)invalidToken
{
    //// Color Declarations
    NSColor* sourceHighlightBorder = [NSColor colorWithCalibratedRed: 0.16 green: 0.529 blue: 0.992 alpha: 1];
    NSColor* tokenBG = [self normalBlueColor];
    NSColor* tokenHoverBG = [self lightBlueColor];
    NSColor* invalidTokenColor = [self errorColor];

    //// Variable Declarations
    BOOL showRightSeparator = rightConnected && !insertNewMode;
    NSColor* tokenBackgorundColor = invalidToken ? invalidTokenColor : (sourceHighlight ? tokenHoverBG : tokenBG);


    //// Subframes
    NSRect frame2 = NSMakeRect(NSMinX(frame) + NSWidth(frame) - 8, NSMinY(frame) + floor((NSHeight(frame) - 7) * 0.50847 + 0.5), 7, 7);


    //// main Drawing
    NSBezierPath* mainPath = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(NSMinX(frame) + 1, NSMinY(frame) + 1, NSWidth(frame) - 1, NSHeight(frame) - 2) xRadius: 5 yRadius: 5];
    [tokenBackgorundColor setFill];
    [mainPath fill];


    if (leftConnected)
    {
        //// Rectangle Drawing
        NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRect: NSMakeRect(NSMinX(frame), NSMinY(frame) + 1, 12, NSHeight(frame) - 2)];
        [tokenBackgorundColor setFill];
        [rectanglePath fill];


        //// Left Connect Drawing
        NSBezierPath* leftConnectPath = NSBezierPath.bezierPath;
        [leftConnectPath moveToPoint: NSMakePoint(NSMinX(frame) + 12, NSMaxY(frame) - 1)];
        [leftConnectPath lineToPoint: NSMakePoint(NSMinX(frame), NSMaxY(frame) - 1)];
        [leftConnectPath moveToPoint: NSMakePoint(NSMinX(frame), NSMinY(frame) + 1)];
        [leftConnectPath lineToPoint: NSMakePoint(NSMinX(frame) + 12, NSMinY(frame) + 1)];
        [tokenBackgorundColor setFill];
        [leftConnectPath fill];
    }


    if (rightConnected)
    {
        //// Right connect Drawing
        NSBezierPath* rightConnectPath = NSBezierPath.bezierPath;
        [rightConnectPath moveToPoint: NSMakePoint(NSMaxX(frame) - 12, NSMinY(frame) + 1)];
        [rightConnectPath lineToPoint: NSMakePoint(NSMaxX(frame), NSMinY(frame) + 1)];
        [rightConnectPath lineToPoint: NSMakePoint(NSMaxX(frame), NSMaxY(frame) - 1)];
        [rightConnectPath lineToPoint: NSMakePoint(NSMaxX(frame) - 12, NSMaxY(frame) - 1)];
        [tokenBackgorundColor setFill];
        [rightConnectPath fill];
    }


    if (insertNewMode)
    {
        //// Separator Drawing
        NSBezierPath* separatorPath = [NSBezierPath bezierPathWithRect: NSMakeRect(NSMinX(frame) + NSWidth(frame) - 10, NSMinY(frame) + 1, 1, NSHeight(frame) - 2)];
        [NSColor.blackColor setFill];
        [separatorPath fill];


        //// Rectangle 2 Drawing
        NSBezierPath* rectangle2Path = [NSBezierPath bezierPathWithRect: NSMakeRect(NSMinX(frame) + NSWidth(frame) - 9, NSMinY(frame) + 1, 9, NSHeight(frame) - 2)];
        [sourceHighlightBorder setFill];
        [rectangle2Path fill];
    }


    if (showRightSeparator)
    {
        //// Separator 2 Drawing
        NSBezierPath* separator2Path = [NSBezierPath bezierPathWithRect: NSMakeRect(NSMinX(frame) + NSWidth(frame) - 1, NSMinY(frame) + 1, 1, NSHeight(frame) - 2)];
        [NSColor.blackColor setFill];
        [separator2Path fill];
    }


    if (insertNewMode)
    {
        //// Bezier Drawing
        NSBezierPath* bezierPath = NSBezierPath.bezierPath;
        [bezierPath moveToPoint: NSMakePoint(NSMaxX(frame2) - 3, NSMinY(frame2) + 0.99985 * NSHeight(frame2))];
        [bezierPath curveToPoint: NSMakePoint(NSMaxX(frame2) - 3, NSMinY(frame2) + 0.57143 * NSHeight(frame2)) controlPoint1: NSMakePoint(NSMaxX(frame2) - 3, NSMinY(frame2) + 1.00000 * NSHeight(frame2)) controlPoint2: NSMakePoint(NSMaxX(frame2) - 3, NSMinY(frame2) + 0.79548 * NSHeight(frame2))];
        [bezierPath lineToPoint: NSMakePoint(NSMaxX(frame2), NSMinY(frame2) + 0.57143 * NSHeight(frame2))];
        [bezierPath lineToPoint: NSMakePoint(NSMaxX(frame2), NSMinY(frame2) + 0.42857 * NSHeight(frame2))];
        [bezierPath lineToPoint: NSMakePoint(NSMaxX(frame2) - 3, NSMinY(frame2) + 0.42857 * NSHeight(frame2))];
        [bezierPath curveToPoint: NSMakePoint(NSMaxX(frame2) - 3, NSMinY(frame2) + 0.00000 * NSHeight(frame2)) controlPoint1: NSMakePoint(NSMaxX(frame2) - 3, NSMinY(frame2) + 0.20452 * NSHeight(frame2)) controlPoint2: NSMakePoint(NSMaxX(frame2) - 3, NSMinY(frame2) + 0.00000 * NSHeight(frame2))];
        [bezierPath lineToPoint: NSMakePoint(NSMaxX(frame2) - 4, NSMinY(frame2) + 0.00000 * NSHeight(frame2))];
        [bezierPath curveToPoint: NSMakePoint(NSMaxX(frame2) - 4, NSMinY(frame2) + 0.42857 * NSHeight(frame2)) controlPoint1: NSMakePoint(NSMaxX(frame2) - 4, NSMinY(frame2) + 0.00000 * NSHeight(frame2)) controlPoint2: NSMakePoint(NSMaxX(frame2) - 4, NSMinY(frame2) + 0.20452 * NSHeight(frame2))];
        [bezierPath lineToPoint: NSMakePoint(NSMaxX(frame2) - 7, NSMinY(frame2) + 0.42857 * NSHeight(frame2))];
        [bezierPath lineToPoint: NSMakePoint(NSMaxX(frame2) - 7, NSMinY(frame2) + 0.57143 * NSHeight(frame2))];
        [bezierPath lineToPoint: NSMakePoint(NSMaxX(frame2) - 4, NSMinY(frame2) + 0.57143 * NSHeight(frame2))];
        [bezierPath curveToPoint: NSMakePoint(NSMaxX(frame2) - 4, NSMinY(frame2) + 0.94430 * NSHeight(frame2)) controlPoint1: NSMakePoint(NSMaxX(frame2) - 4, NSMinY(frame2) + 0.72450 * NSHeight(frame2)) controlPoint2: NSMakePoint(NSMaxX(frame2) - 4, NSMinY(frame2) + 0.86845 * NSHeight(frame2))];
        [bezierPath curveToPoint: NSMakePoint(NSMaxX(frame2) - 4, NSMinY(frame2) + 1.00000 * NSHeight(frame2)) controlPoint1: NSMakePoint(NSMaxX(frame2) - 4, NSMinY(frame2) + 0.97947 * NSHeight(frame2)) controlPoint2: NSMakePoint(NSMaxX(frame2) - 4, NSMinY(frame2) + 1.00000 * NSHeight(frame2))];
        [bezierPath lineToPoint: NSMakePoint(NSMaxX(frame2) - 3, NSMinY(frame2) + 1.00000 * NSHeight(frame2))];
        [bezierPath lineToPoint: NSMakePoint(NSMaxX(frame2) - 3, NSMinY(frame2) + 0.99985 * NSHeight(frame2))];
        [bezierPath closePath];
        [NSColor.blackColor setFill];
        [bezierPath fill];
    }
}

@end
